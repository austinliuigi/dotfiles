" Name: vimrc
" Author: Austin Liu
" Date Created: July 2020
" Date Modified: April 8, 2022
"
""" Options {{{

" Boiler Plate {{{

syntax on                       " Enable syntax highlighting

filetype plugin indent on       " Enable filetype detection, execute filetype-specific ex commands local to the local buffer, and load the indent file for the detected filetype

set encoding=utf-8              " Character encoding format

set backspace=start,eol,indent  " Better backspace in insert mode

set showcmd

" }}}

" Preferences {{{

set clipboard^=unnamed          " Make system clipboard default

set hidden                      " Allow a buffer to load in a window that currently has a modified buffer

set relativenumber              " Make line numbers relative to current line

set number                      " Show line numbers (only shows current line # with relativenumber set)

set splitright                  " Default vert split window to appear on the right

set wildmenu                    " Command-line autocomplete bar

set wildcharm=<Tab>             " Set key for mappings to acticatte windmenu

set scrolloff=0                 " Set number of lines to keep above/below cursor

set tildeop                     " Tilde acts like an operator

set cursorline                  " Highlight line that cursor is on

set noshowmode                  " Don't show modemsg on cmdline

set showmatch                   " Show matching symmetric delimiter

set lazyredraw                  " Be conservative with screen refreshes

set belloff=esc                 " Don't ring bell when esc is pressed in normal-mode

set shortmess+=c                " Disable completion menu messages

set shortmess-=S                " Show search match index

set mouse=a                     " Allow use of mouse in all modes

set nowrap

set sidescroll=1

set sidescrolloff=999

" Cursor style in different modes
 "Ps = 0  -> blinking block.
 "Ps = 1  -> blinking block (default).
 "Ps = 2  -> steady block.
 "Ps = 3  -> blinking underline.
 "Ps = 4  -> steady underline.
 "Ps = 5  -> blinking bar (xterm).
 "Ps = 6  -> steady bar (xterm).
let &t_SI = "\e[5 q"
let &t_SR = "\e[4 q"
let &t_EI = "\e[1 q"
augroup cursorinit
    autocmd!
    autocmd VimEnter * if !has("gui_running") | silent execute '!echo -ne "\e[1 q"' | redraw! | endif
augroup END

" Don't ring bell for unmatched characters
augroup bell
    autocmd!
    autocmd FileType markdown,text setlocal belloff+=showmatch
augroup END

" Remove excess comment characters when joining lines
augroup fo
    autocmd!
    autocmd FileType * set formatoptions=tcjnqp
augroup END

" Set relative numbers for help windows
augroup relnumhelp
    autocmd!
    autocmd BufWinEnter * if &buftype == "help" | setlocal relativenumber | endif
augroup END

" }}}

" Color {{{

let g:gruvbox_transp_bg = 1        " make colorscheme bg transparent by default
let g:solarized_termtrans  =1

set termguicolors               " use gui colors in terminal; NOTE: must come before setting colorscheme

set background=dark

" Change iterm colorscheme to match vim colorscheme
augroup itermcolor
    autocmd!
    " autocmd Colorscheme * execute 'silent !echo -e "\033]50;SetProfile=<amatch>\a"'
    autocmd Colorscheme * if expand("<amatch>") ==# "gruvbox8" | execute 'silent !echo -e "\033]50;SetProfile=gruvbox\a"' | endif
    autocmd Colorscheme * if expand("<amatch>") ==# "github" | execute 'silent !echo -e "\033]50;SetProfile=github\a"' | endif
    autocmd Colorscheme * if expand("<amatch>") ==# "solarized8" | execute 'silent !echo -e "\033]50;SetProfile=solarized\a"' | endif
    " autocmd Colorscheme * echo expand("<amatch>") ==# "gruvbox8"
    " autocmd Colorscheme * echo g:colors_name ==# "gruvbox8"
    " autocmd Colorscheme * echo "<amatch>" ==# "gruvbox8"
augroup END

" Set highlighting of folds
augroup foldcolor
    autocmd!
    autocmd VimEnter,ColorScheme * hi! link Folded Normal
augroup END

" Highlight todo everywhere (not just in comments)
augroup todo
    autocmd!
    autocmd Syntax * syn keyword myTodo TODO XXX containedin=ALL
    autocmd Syntax * hi link myTodo TODO
augroup END

" Re-source all ftplugin stuff after changing colorschemes
augroup ftcolors
    autocmd!
    autocmd Colorscheme * let &filetype = &filetype
augroup END

" }}}

" Whitespace {{{

set tabstop=4                                       " Length of <tab> when it is displayed

set softtabstop=4                                   " Length of <tab> (& respective <bksp>) when you type it

set shiftwidth=4                                    " Indent length

set expandtab                                       " Tab will act as spaces (makes its length consistent across all platforms)

set autoindent                                      " Indent to the previous line's indent level

set smartindent                                     " Indent based on c syntax

set breakindent                                     " Make wrapped lines have same indentation as original line

set list                                            " Show whitespace characters

" set listchars=tab:▸\ ,eol:¬,precedes:‹,extends:›    " Set whitespace characters
set listchars=tab:▸\ ,eol:↴,precedes:‹,extends:›    " Set whitespace characters

set concealcursor=

let &showbreak = '↪ '
" set showbreak=⊂

" }}}

" Searching {{{

set incsearch                   " Search as you type

set hlsearch                    " Search highlighting

set ignorecase                  " Default to case insensitive

" }}}

" Completion {{{

set completeopt=menuone,noinsert

set pumheight=5

" }}}

" Folding {{{

" Define folding using foldexpr option
set foldmethod=expr

" Use markers to fold in vimrc, inputrc, and txt files
augroup foldmarker
    autocmd!
    autocmd BufNewFile,BufReadPost,BufWritePost,SourcePost * if (expand("%:t") ==? "vimrc") || (expand("%:t") ==? "inputrc") || (expand("%:e") ==? "txt") | setlocal foldmethod=marker | endif
augroup END

" Set string that closed folds show
function! MyFoldText()
    let num_of_spaces = (v:foldlevel - 1) * 2
    let fold_start = repeat(' ', num_of_spaces)
    let line = getline(v:foldstart)
    let fold_title = substitute(line, '^\s\+\|"\ *\|//\|/\*\|\*/\|\ *{\+\d\=', '', 'g') . ' '
    let num_of_lines = v:foldend - v:foldstart
    let fold_linecount = '(' . num_of_lines . ' L)'
    let last_linenr_digits = strchars(line('$'))
    let fillcharcount = winwidth(0) - strchars(fold_title) - strchars(fold_start) - strchars(fold_linecount) - &numberwidth - ((last_linenr_digits >= &numberwidth) ? (last_linenr_digits - &numberwidth + 1) : 0) - 2
    " extra 2 for the signcolumn
    return fold_start . fold_title . repeat('·', fillcharcount) . fold_linecount
endfunction

set foldtext=MyFoldText()
set fillchars=fold:\ 

" }}}

" Timeout {{{

set notimeout ttimeout          " Wait indefinitely for a mapping, but a set time for key-codes

set ttimeoutlen=0               " Set time to wait for key-codes

" }}}

" GUI {{{

" Set gvim font & font size
if has("gui_running")
    if has("gui_gtk2")
        set guifont=Luxi\ Mono\ 12
    elseif has("x11")
    " Also for GTK 1
        set guifont=*-lucidatypewriter-medium-r-normal-*-*-180-*-*-m-*-*
    elseif has("gui_win32")
        set guifont=Consolas:h11
    elseif has("gui_macvim")
         set guifont=Menlo:h12,DejaVu\ Sans\ Mono:h13
    endif
endif

set guioptions-=m               " Remove menu in gvim

set guioptions-=T               " Remove toolbar in gvim

set guioptions-=r               " Remove scrollbar in gvim

" }}}

" Backup Files {{{

let &directory=expand('~/.vimdata/Swap//')
if !isdirectory(&directory) | call mkdir(&directory, "p") | endif

set backup
let &backupdir=expand('~/.vimdata/Backup//')
if !isdirectory(&backupdir) | call mkdir(&backupdir, "p") | endif

set undofile
let &undodir=expand('~/.vimdata/Undo//')
if !isdirectory(&undodir) | call mkdir(&undodir, "p") | endif

" }}}

"}}}

""" Keymaps{{{

" Leader Key {{{

let mapleader = " "

let maplocalleader = " "

nnoremap <leader> <nop>

" }}}

" Motion mappings {{{

nnoremap <expr> k v:count ? 'k' : 'gk'

nnoremap <expr> j v:count ? 'j' : 'gj'

" }}}

" Register mappings {{{

nnoremap <leader>c c

nnoremap <leader>C C

nnoremap <leader>d d

nnoremap <leader>D D

nnoremap <leader>s s

nnoremap <leader>S S

nnoremap <leader>x x

nnoremap <leader>X X

nnoremap c "_c

nnoremap C "_C

nnoremap d "_d

nnoremap D "_D

nnoremap s "_s

nnoremap S "_S

nnoremap x "_x

nnoremap X "_X

vnoremap <leader>c c

vnoremap <leader>C C

vnoremap <leader>d d

vnoremap <leader>D D

vnoremap <leader>s s

vnoremap <leader>S S

vnoremap <leader>x x

vnoremap <leader>X X

vnoremap c "_c

vnoremap C "_C

vnoremap d "_d

vnoremap D "_D

vnoremap s "_s

vnoremap S "_S

vnoremap x "_x

vnoremap X "_X

" }}}

" Buffer list mappings {{{

nnoremap <leader>]b :bn<CR>

nnoremap <leader>[b :bp<CR>

nnoremap <leader>\b :b#<CR>

nnoremap <leader><leader>b :ls<CR>:b<SPACE>

" }}}

" Argument list mappings {{{

nnoremap <leader>]a :n<CR>

nnoremap <leader>[a :N<CR>

nnoremap <leader><leader>a :args

" }}}

" Window mappings {{{

nnoremap <leader>nww :enew<CR>

nmap <leader>nwh :topleft vnew<CR>

nmap <leader>nwj :botright new<CR>

nmap <leader>nwk :topleft new<CR>

nmap <leader>nwl :botright vnew<CR>

" }}}

" Tab mappings {{{

nnoremap <C-t><C-l> :tabn<CR>

nnoremap <C-t><C-h> :tabp<CR>

inoremap <C-t><C-l> :tabn<CR>

inoremap <C-t><C-h> :tabp<CR>

nnoremap <C-t>L :+tabmove<CR>

nnoremap <C-t>H :-tabmove<CR>

nnoremap <C-t>m :tabs<CR>:tabmove<SPACE>

nnoremap <leader><leader>t :tabs<CR>:tabn<SPACE>

nnoremap <leader>nt :tabnew<CR>

" }}}

" Toggle mappings {{{

" nnoremap <leader>tc :ToggleConcealLevel<CR>

nnoremap <leader>te :Lexplore<CR>

nnoremap <expr> <silent> <leader>th v:hlsearch ? ":nohl<CR>" : ":set hlsearch<CR>""

nnoremap <leader>tl :ToggleSpaceChar<CR>

nnoremap <leader>tn :set relativenumber!<CR>

nnoremap <leader>tw :set wrap!<CR>

" }}}

" Normal mode mappings {{{

nnoremap ! :so %<CR>

nmap <leader>H <Plug>ToTopQuarter

nnoremap <leader><leader>l :set list!<CR>

nmap <leader>L <Plug>ToBottomQuarter

nnoremap <leader>p :put<CR>

nnoremap <leader>P :put!<CR>

nnoremap <C-t><C-t> <C-t>

nnoremap <expr> <leader>v empty(&virtualedit) ? ':set virtualedit+=all<CR>' : ':set virtualedit-=all<CR>'

nnoremap Y y$

nnoremap zC zCvzC

" }}}

" Insert mode mappings {{{

inoremap <C-r> <C-r><C-r>

inoremap <expr> <Left> pumvisible() ? "<C-e>" : "<Left>"

inoremap <expr> <Right> pumvisible() ? "<C-y>" : "<Right>"
" inoremap <expr> <Right> pumvisible() ? "<C-p><C-n><C-x><C-p>" : "<Right>"

imap <expr> <CR> pumvisible() ? "<C-e><Plug>(PearTreeExpand)" : "<Plug>(PearTreeExpand)"
" imap <expr> <CR> pumvisible() ? "<C-e><CR>" : "<CR>"

" }}}

" Visual mode mappings {{{

vnoremap < <gv

vnoremap > >gv

" }}}

" Custom text objects {{{

vnoremap <silent> az :<C-u>normal! [zV]z<CR>

omap <silent> az :normal Vaz<CR>

vnoremap <silent> iz :<C-u>normal! [zjV]zk<CR>

omap <silent> iz :normal Viz<CR>

vnoremap <silent> af :<C-u>normal! ggVG<CR>

omap <silent> af :normal Vaf<CR>

vnoremap <silent> if :<C-u>call MoveToLastNonBlankLine()\|call MoveToFirstNonBlankLine()\|normal! V``<CR>

omap <silent> if :normal Vif<CR>

vnoremap <silent> al :<C-u>normal! 0v$h<CR>

omap <silent> al :normal Val<CR>

vnoremap <silent> il :<C-u>normal! ^vg_<CR>

omap <silent> il :normal Vil<CR>

" }}}

""" Mapping Functions{{{

function! TabRightIns()
    execute "normal! \<Esc>:tabn\<CR>"
    if col('.')!=1
        call feedkeys('a', 'n')
    else
        call feedkeys('i', 'n')
    endif
endfunction
command! TabRightIns call TabRightIns()

function! TabLeftIns()
    execute "normal! \<Esc>:tabp\<CR>"
    if col('.')!=1
        call feedkeys('a', 'n')
    else
        call feedkeys('i', 'n')
    endif
endfunction
command! TabLeftIns call TabLeftIns()

function! ToggleSpaceChar()
    if stridx(&listchars, "space") <= 0
        set listchars+=space:⋅
    else
        set listchars-=space:⋅
    endif
endfunction
command! ToggleSpaceChar call ToggleSpaceChar()

function! ToggleConcealLevel()
    if &l:conceallevel != 0
        setlocal conceallevel=0
    else
        setlocal conceallevel=2
    endif
endfunction
command! ToggleConcealLevel call ToggleConcealLevel()

function! MoveToFirstNonBlankLine()
    normal! gg
    if empty(substitute(getline(line('.')), '\s', '', "g"))
        call search('^\s*\S\+')
    endif
endfunction

function! MoveToLastNonBlankLine()
    normal! G
    if empty(substitute(getline(line('.')), '\s', '', "g"))
        call search('^\s*\S\+', 'b')
    endif
endfunction

"}}}

"}}}

""" Plugins {{{

"" Plugs {{{

" Bootstrap {{{

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" }}}

" Plugged {{{

call plug#begin()

Plug 'dense-analysis/ale'

Plug 'tmsvg/pear-tree'

Plug 'junegunn/fzf'

Plug 'junegunn/fzf.vim'

Plug 'Yggdroot/indentLine'

Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install' }

Plug 'arcticicestudio/nord-vim'

Plug 'unblevable/quick-scope'

Plug 'luochen1990/rainbow'

Plug 'austinliuigi/staticyank.vim'

Plug 'wellle/targets.vim'

Plug 'markonm/traces.vim'

Plug 'SirVer/ultisnips'

Plug 'vim-airline/vim-airline'

Plug 'vim-airline/vim-airline-themes'

Plug 'tpope/vim-commentary'

Plug 'junegunn/vim-easy-align'

Plug 'tpope/vim-eunuch'

Plug 'tpope/vim-fugitive'

Plug 'airblade/vim-gitgutter'

Plug 'rrethy/vim-hexokinase', { 'do': 'make hexokinase' }

Plug 'machakann/vim-highlightedyank'

Plug 'vimpostor/vim-lumen'

" Plug 'mbbill/undotree'
Plug 'simnalamburt/vim-mundo'

Plug 'tpope/vim-repeat'

Plug 'psliwka/vim-smoothie', { 'commit': '10fd0aa57d17'}

" Plug 'tpope/vim-surround'
Plug 'machakann/vim-sandwich'

Plug 'junegunn/vim-slash'

Plug 'chaoren/vim-wordmotion'

Plug 'dhruvasagar/vim-zoom'

call plug#end()

"}}}

"}}}

"" Configs {{{

" ale {{{

let g:ale_sign_priority = 10
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
augroup alehl
    autocmd!
    autocmd ColorScheme * highlight! link ALEErrorSign Error
    autocmd ColorScheme * highlight! link ALEWarningSign Todo
augroup END

" }}}

" fzf {{{

nnoremap <leader>fb :Buffers<CR>

nnoremap <leader>fc :Commands<CR>

nnoremap <leader>ff :Files<CR>

nnoremap <leader>fgc :Commits<CR>

nnoremap <leader>fgf :GitFiles<CR>

nnoremap <leader>fht :Helptags<CR>

nnoremap <leader>fhc :History:<CR>

nnoremap <leader>fht :Helptags<CR>

nnoremap <leader>fh/ :History/<CR>


"}}}

" NetRW {{{

let g:netrw_dirhistmax=0

" if has("gui_running")
"     let g:netrw_home="~/vimfiles"
" else
"     let g:netrw_home="~/.vim"
" endif

let g:netrw_liststyle=3     " Tree-style listing

let g:netrw_bufsettings = "noma nomod nowrap ro nobl nu rnu"    " NetRW buffer settings

" }}}

" quick-scope {{{

let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

augroup qshl
    autocmd!
    autocmd ColorScheme * highlight! QuickScopePrimary guifg='#F39C12' gui=underline,bold ctermfg=155 cterm=underline,bold
    autocmd ColorScheme * highlight! QuickScopeSecondary guifg='#6F8EA3' gui=underline ctermfg=81 cterm=underline
augroup END

" }}}

" rainbow {{{

let g:rainbow_active = 0

let g:rainbow_conf = {
\	'guifgs': ['#afd7d7', '#d7d75f', '#d7af00', '#af5f5f'],
\	'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
\	'guis': [''],
\	'cterms': [''],
\}

nnoremap <leader>tr :RainbowToggle<CR>

" }}}

" traces.vim {{{

let g:traces_num_range_preview = 1

" }}}

" ultisnips {{{

let g:UltiSnipsSnippetDirectories = [$HOME.'/.vim/snips']

let g:UltiSnipsExpandTrigger = '<Tab>'
let g:UltiSnipsJumpForwardTrigger = '<Tab>'
let g:UltiSnipsJumpBackwardTrigger = '<S-Tab>'

" }}}

" vim-airline {{{

let g:airline_left_sep = ''
let g:airline_right_sep = ''

let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.readonly = '[RO]'

let g:airline_extensions = ['branch', 'mundo']
let g:airline#extensions#branch#vcs_checks = []
" let g:airline#extensions#branch#vcs_checks = ['untracked', 'dirty']

let g:airline_theme='peaksea'
augroup AirlineModifiedHL
    autocmd User AirlineAfterTheme execute 'let g:airline_c_bg = g:airline#themes#'.g:airline_theme.'#palette.normal.airline_c[1]' | execute 'hi! airline_modified guifg=#db4b4b guibg='.g:airline_c_bg
augroup END

function! AirlineModifiedHL()
    return &modified ? '%#airline_modified#' : ''
endfunction

let g:airline_section_c = airline#section#create(['mode'])
let g:airline_section_c = airline#section#create(['%{%AirlineModifiedHL()%}','file',' ','readonly'])
let g:airline_section_x = airline#section#create([])
let g:airline_section_y = airline#section#create([' ','%p','%%'])
let g:airline_section_z = airline#section#create(['%l',':','%c'])


" }}}

" vim-easy-align {{{

" 1. <Enter> key in visual mode, or `ga` followed by a motion or a text object to
"    start interactive mode
" 2. Optional: Enter keys to select alignment mode (left, right, or center)
" 3. Optional: N-th delimiter (default: 1)
"   - `1` Around the 1st occurrences of delimiters
"   - `2` Around the 2nd occurrences of delimiters
"   - ...
"   - `*` Around all occurrences of delimiters
"   - `**` Left-right alternating alignment around all delimiters
"   - `-` Around the last occurrences of delimiters (`-1`)
"   - `-2` Around the second to last occurrences of delimiters
"   - ...
" 4. Delimiter key (a single keystroke; <Space>, `=`, `:`, `.`, `|`, `&`, `#`, `,`)

nmap ga <Plug>(LiveEasyAlign)

vmap ga <Plug>(LiveEasyAlign)

" }}}

" vim-eunuch {{{

let g:eunuch_no_maps=1

" }}}

" vim-gitgutter {{{

let g:gitgutter_signs = 1

set updatetime=100

set signcolumn=yes

nnoremap <leader><leader>dg :GitGutterDiffOrig<CR>

nnoremap <leader>g :GitGutterLineHighlightsToggle<CR>

" }}}

" vim-hexokinase {{{

let g:Hexokinase_highlighters = [ 'sign_column' ]

let g:Hexokinase_ftEnabled = ['css', 'html', 'javascript', 'md', 'txt']


nnoremap <leader>tc :HexokinaseToggle<CR>

" }}}

" vim-highlightedyank {{{

" augroup yankhl
"     autocmd!
"     autocmd ColorScheme * highlight HighlightedyankRegion ctermbg=222 guibg=#F1E3B9
" augroup END

" }}}

" vim-lumen {{{

let g:lumen_startup_overwrite = 0

augroup lumen
    autocmd!
    autocmd User LumenLight nested colorscheme solarized8
    autocmd User LumenDark nested colorscheme gruvbox8
augroup END

" }}}

" vim-mundo {{{

" let g:mundo_width=75            " Set width of graph and preview (default 45)

" let g:mundo_preview_height=15   " Set height of preview window (default 15)

let g:mundo_preview_bottom = 1    " Force preview window to be below windows instead of below graph

" let g:mundo_inline_undo=1       " Enable one line diff in graph

" let g:mundo_return_on_revert=0  " Keep focus in graph after selecting old undo state

let g:mundo_playback_delay = 750  " Set time between each change when running 'play to'

let g:mundo_mappings = {
            \ '<nowait> <CR>': 'preview',
            \ '<nowait> o': 'preview',
            \ '<nowait> J': 'move_older_write',
            \ '<nowait> K': 'move_newer_write',
            \ '<nowait> gg': 'move_top',
            \ '<nowait> G': 'move_bottom',
            \ '<nowait> P': 'play_to',
            \ '<nowait> d': 'diff',
            \ '<nowait> i': 'toggle_inline',
            \ '<nowait> /': 'search',
            \ '<nowait> n': 'next_match',
            \ '<nowait> N': 'previous_match',
            \ '<nowait> p': 'diff_current_buffer',
            \ '<nowait> r': 'rdiff',
            \ '<nowait> ?': 'toggle_help',
            \ '<nowait> q': 'quit',
            \ '<nowait> <2-LeftMouse>': 'mouse_click',
            \ '<nowait> j': 'move_older',
            \ '<nowait> k': 'move_newer',
            \ '<nowait> <Down>': 'move_older',
            \ '<nowait> <Up>': 'move_newer'
            \ }

nnoremap <leader>tu :MundoToggle<CR>

" }}}

" vim-sandwich {{{

let g:sandwich_no_default_key_mappings = 1
let g:operator_sandwich_no_default_key_mappings = 1
let g:textobj_sandwich_no_default_key_mappings = 1

nmap gs <Plug>(sandwich-add)
nmap ds <Plug>(sandwich-delete)
nmap cs <Plug>(sandwich-replace)
vmap gs <Plug>(sandwich-add)

if hasmapto('<Plug>(RepeatDot)')
    nmap . <Plug>(operator-sandwich-predot)<Plug>(RepeatDot)
else
    nmap . <Plug>(operator-sandwich-predot)
end

" }}}

" vim-slash {{{
    if has('timers')
      " Blink 3 times with 65ms interval
      noremap <expr> <Plug>(slash-after) 'zz'.slash#blink(3, 65)
    endif
" }}}

" vim-wordmotion {{{

let g:wordmotion_prefix = "<Space>" " Set prefix key for wordmotion mapping

" }}}

" vim-zoom {{{

nmap <C-w><C-m> <Plug>(zoom-toggle)

" }}}

"}}}

"}}}

""" Plugins (Deprecated) {{{
" AutoComplPop {{{

" let g:acp_enableAtStartup=0

packadd AutoComplPop

" }}}
" blank-line {{{

" packadd blank-line

" nmap <leader>o <Plug>BlankLineBelow

" nmap <leader>O <Plug>BlankLineAbove

" nmap dD <Plug>ClearLineBlackHole

" nmap <leader>dD <Plug>ClearLineDefaultReg

" }}}
" Colorizer {{{

" let g:colorizer_auto_color = 1      " Turn on colorizer automatically for every file

let g:colorizer_auto_filetype='css,html,txt,md'       " Define filetypes in which colorizer will be turned on automatically

" }}}
" self-diff {{{

" packadd self-diff

nmap <leader><leader>do <Plug>DiffWithOpened

nmap <leader><leader>dls <Plug>DiffWithLastSave

" }}}
" wsl-clip {{{

let g:disable_wsl_yank=has('gui_running')       " Disable wslyank for gui, enable for terminal

let g:disable_wsl_paste=has('gui_running')      " Disable wslpaste for gui, enable for terminal

" }}}
"}}}

colorscheme nord
