" Name: vimrc
" Author: Austin Liu
" Date Created: July 2020
" Date Modified: August 5, 2020
"
""" Options {{{
" Boiler Plate {{{

syntax on                       " enable syntax highlighting

filetype plugin indent on       " enable filetype detection, execute filetype-specific ex commands local to the local buffer, and load the indent file for the detected filetype

set encoding=utf-8              " character encoding format

set backspace=start,eol,indent  " better backspace in insert mode

set showcmd

" }}}
" Whitespace {{{

set tabstop=4                                       " length of <tab> when it is displayed

set softtabstop=4                                   " length of <tab> (& respective <bksp>) when you type it

set shiftwidth=4                                    " indent length

set expandtab                                       " tab will act as spaces (makes its length consistent across all platforms)

set autoindent                                      " indent to the previous line's indent level

set smartindent                                     " indent based on c syntax

set list                                            " show whitespace characters

set listchars=tab:▸\ ,eol:¬,precedes:‹,extends:›    " set whitespace characters

function! ToggleSpaceChar()
    if stridx(&listchars, "space") <= 0
        set listchars+=space:.
    else
        set listchars-=space:.
    endif
endfunction
command! ToggleSpaceChar call ToggleSpaceChar()

function! ToggleConcealLevel()
    if &l:conceallevel != 0
        setlocal conceallevel=0
    else
        setlocal conceallevel=2
    endif
endfunction
command! ToggleConcealLevel call ToggleConcealLevel()

" }}}
" Searching {{{

set incsearch                   " search as you type

set hlsearch                    " search highlighting

set ignorecase                  " default to case insensitive

" }}}
" Folding {{{

" define folding using foldexpr option
set foldmethod=expr

" use markers to fold in vimrc, inputrc, and txt files
if (expand("%:t") ==? "vimrc") || (expand("%:t") ==? "inputrc") || (expand("%:e") ==? "txt")
    setlocal foldmethod=marker
endif

" set string that closed folds show
function! MyFoldText()
    let line = getline(v:foldstart)
    let fold_title = substitute(line, '^\s\+\|"\ *\|//\|/\*\|\*/\|\ *{\+\d\=', '', 'g') . ' '
    let num_of_spaces = (v:foldlevel - 1) * 4
    let fold_start = repeat(' ', num_of_spaces)
    let num_of_lines = v:foldend - v:foldstart
    let fold_linecount = '(' . num_of_lines . ' L)'
    let lastline_digits = strchars(line('$'))
    let fillcharcount = winwidth(0) - strchars(fold_title) - strchars(fold_start) - strchars(fold_linecount) - &numberwidth - ((lastline_digits >= &numberwidth) ? (lastline_digits - &numberwidth + 1) : 0)
    return fold_start . fold_title . repeat('·', fillcharcount) . fold_linecount
endfunction

set foldtext=MyFoldText()
set fillchars=fold:\ 

" }}}
" Timeout {{{

set notimeout ttimeout          " wait indefinitely for a mapping, but a set time for key-codes

set ttimeoutlen=0               " set time to wait for key-codes

" }}}
" Personal Preferences {{{

" let g:scheme_termtrans=1        " make colorscheme bg transparent by default
let g:gruvbox_transp_bg=1        " make colorscheme bg transparent by default

if has("gui_running")
    colorscheme github
else
    colorscheme gruvbox8
endif

set hidden                      " allow a buffer to load in a window that currently has a modified buffer

set relativenumber              " make line numbers relative to current line

set number                      " show line numbers (only shows current line # with relativenumber set)

set splitright                  " default vert split window to appear on the right

set wildmenu                    " command-line autocomplete bar

set scrolloff=3                 " set number of lines to keep above/below cursor

set tildeop                     " tilde acts like an operator

set cursorline                  " highlight line that cursor is on

set noshowmode                  " don't show modemsg on cmdline

set showmatch                   " show matching symmetric delimiter

set lazyredraw                  " be conservative with screen refreshes

set belloff=esc                 " don't ring bell when esc is pressed in normal-mode

" remove excess comment characters when joining lines
augroup fo
    autocmd!
    autocmd FileType * set formatoptions=jn
augroup END

" }}}
" GUI {{{

" set guifont=Source_Code_Pro_Medium:h10:b,Fixedsys:h10:b   " set gvim font & font size
" set guifont=Cascadia_Code:h11   " set gvim font & font size
set guifont=Consolas:h11        " set gvim font & font size

set guioptions-=m               " remove menu in gvim

set guioptions-=T               " remove toolbar in gvim

set guioptions-=r               " remove scrollbar in gvim

" }}}
" Backup Files {{{

let &directory=expand('~/.vimdata/Swap//')
if !isdirectory(&directory) | call mkdir(&directory, "p") | endif

set backup
let &backupdir=expand('~/.vimdata/Backup//')
if !isdirectory(&backupdir) | call mkdir(&backupdir, "p") | endif

set undofile
let &undodir=expand('~/.vimdata/Undo//')
if !isdirectory(&undodir) | call mkdir(&undodir, "p") | endif

" }}}
"}}}
""" NetRW {{{

let g:netrw_dirhistmax=0

" if has("gui_running")
"     let g:netrw_home="~/vimfiles"
" else
"     let g:netrw_home="~/.vim"
" endif

let g:netrw_liststyle=3     " Tree-Style Listing

"}}}
""" Mundo {{{

" let g:mundo_width=75            " Set width of graph and preview (default 45)

" let g:mundo_preview_height=15   " Set height of preview window (default 15)

let g:mundo_preview_bottom=1    " Force preview window to be below windows instead of below graph

" let g:mundo_inline_undo=1       " Enable one line diff in graph

" let g:mundo_return_on_revert=0  " Keep focus in graph after selecting old undo state

"}}}
""" Wsl-Clip {{{

let g:disable_wsl_yank=has('gui_running')       " disable wslyank for gui, enable for terminal

let g:disable_wsl_paste=has('gui_running')      " disable wslpaste for gui, enable for terminal

"}}}
""" Status Line {{{

set laststatus=2                                " always show status line

let g:currentmode = {
    \ 'n' : 'NORMAL',
    \ 'v' : 'VISUAL',
    \ 'V' : 'V-LINE',
    \ "\<C-v>" : 'V-BLOCK',
    \ 'i' : 'INSERT',
    \ 'R' : 'REPLACE',
    \ 's' : 'SELECT',
    \ 'S' : 'S-LINE',
    \ "\<C-s>" : 'S-BLOCK',
    \ 'c' : 'COMMAND',
    \ 't' : 'TERMINAL'
\ }

function! Getcurrentmode()
    return get(g:currentmode, mode())
endfunction


function! Getfiletype()
    let l:ftype = &filetype
    if strlen(ftype) ==? 0
        return '[NONE]'
    else
        return '[' . toupper(l:ftype) . ']'
    endif
endfunction


function! Getmodified()
    if &readonly
        return '[RO]'
    elseif &modified && (&buftype !=? "terminal")
        return '[+]'
    else
        return ''
    endif
endfunction


function! StatusLine()
    if win_getid(winnr()) ==? g:statusline_winid
        if mode() ==? 'n' || mode() ==? 'c'
            " set statusline highlight group
            hi! StatusLine cterm=NONE ctermfg=109 ctermbg=231 gui=NONE guifg=#87afaf guibg=#ececec 
            " statusline of active window in normal or command mode
            return '%#User1# %{Getfiletype()} %#User2# %{Getcurrentmode()} %* %f %#User8#%{Getmodified()}%=%*LN:%4l  CN:%3c '
        elseif mode() ==? 'i' || mode() ==? 'r' 
            " set statusline highlight group
            hi! StatusLine cterm=NONE ctermfg=178 ctermbg=231 gui=NONE guifg=#d7af00 guibg=#ececec 
            " statusline of active window in insert or replace modes
            return '%#User1# %{Getfiletype()} %#User3# %{Getcurrentmode()} %* %f %#User8#%{Getmodified()}%=%*LN:%4l  CN:%3c '
        elseif mode() ==? 'v' || mode() ==? 's' || mode() ==? "\<C-v>" || mode() ==? "\<C-s>"
            " set statusline highlight group
            hi! StatusLine cterm=NONE ctermfg=247 ctermbg=231 gui=NONE guifg=#9e9e9e guibg=#ececec 
            " statusline of active window in visual or select modes
            return '%#User1# %{Getfiletype()} %#User4# %{Getcurrentmode()} %* %f %#User8#%{Getmodified()}%=%*LN:%4l  CN:%3c '
        elseif mode() ==? 't'
            " " set statusline highlight group
            " hi! StatusLine cterm=NONE ctermfg=142 ctermbg=231 gui=NONE guifg=#afaf00 guibg=#ffffff 
            "
            " statusline of active window in terminal mode
            return '%#User1# %{Getfiletype()} %#User6# %{Getcurrentmode()} %* %f '
        endif
    else                                                                               
        " statusline of inactive windows
        return '%#User1# %{Getfiletype()} %#User7# %{Getcurrentmode()} %* %f %#User9#%{Getmodified()}%=%*LN:%4l  CN:%3c '
    endif
endfunction

set statusline=%!StatusLine()

"}}}
""" Mappings{{{

let mapleader = " "

nnoremap <leader>c c

nnoremap <leader><leader>c :ToggleConcealLevel<CR>

nnoremap <leader>C C

nnoremap <leader>d d

nmap <leader>dD <Plug>ClearLineDefaultReg

nnoremap <leader><leader>do :DiffOrig<CR>

nnoremap <leader><leader>dls :DiffLastSave<CR>

nnoremap <leader>D D

nnoremap <leader>e :vsp .<CR><C-W>L

nnoremap <leader>h :nohl<CR>

nnoremap <leader>l :ToggleSpaceChar<CR>

nnoremap <leader><leader>l :set list!<CR>

nnoremap <leader>n :set relativenumber!<CR>

nmap <leader>o <Plug>BlankLineBelow

nmap <leader>O <Plug>BlankLineAbove

nnoremap <leader>p :put<CR>

nnoremap <leader>P :put!<CR>

nnoremap <leader>u :MundoToggle<CR>

nnoremap <leader>w :set wrap!<CR>

nnoremap <leader>x x

nnoremap <space> <nop>

nnoremap c "_c

nnoremap C "_C

nnoremap d "_d

nmap dD <Plug>ClearLineBlackHole

nnoremap D "_D

nnoremap <expr> k v:count ? 'k' : 'gk'

nnoremap <expr> j v:count ? 'j' : 'gj'

nnoremap x "_x

nnoremap Y y$

inoremap <C-R> <C-R><C-R>

"}}}
