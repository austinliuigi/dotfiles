"Name: vimrc
"Author: Austin Liu
"Date Created: July 2020
"Date Modified: August 5, 2020

""" Options {{{

" Boiler Plate

syntax on						" enable syntax highlighting

filetype plugin indent on		" enable filetype detection, execute filetype-specific ex commands local to the local buffer, and load the indent file for the detected filetype

set encoding=utf-8				" character encoding format

set backspace=start,eol,indent	" better backspace in insert mode

set showcmd

" Whitespace

set tabstop=4					" length of <tab> when it is displayed

set softtabstop=4				" length of <tab> (& respective <bksp>) when you type it

set shiftwidth=4				" indent length

set expandtab					" tab will act as spaces (makes its length consistent across all platforms)

set autoindent					" indent to the previous line's indent level

set smartindent					" indent based on c syntax

" Searching

set incsearch					" search as you type

set hlsearch					" search highlighting

set ignorecase                  " default to case insensitive

" Personal Preferences

let g:scheme_termtrans=1        " make colorscheme bg transparent by default

colorscheme custom              " use personal colorscheme

set hidden						" allow a buffer to load in a window that currently has a modified buffer

set relativenumber				" make line numbers relative to current line

set number						" show line numbers (only shows current line # with relativenumber set)

set splitright                  " default vert split window to appear on the right

set foldmethod=marker           " use triple braces to indicate beginning and end of a fold

set wildmenu					" command-line autocomplete bar

set scrolloff=5                 " set number of lines to keep above/below cursor

set tildeop                     " tilde acts like an operator

set cursorline                  " highlight line that cursor is on

set noshowmode                  " don't show modemsg on cmdline

set showmatch					" show matching symmetric delimiter

set linebreak                   " avoid wrapping mid-word

set lazyredraw					" be conservative with screen refreshes

" GUI

set guifont=Cascadia_Mono:h11   " set gvim font & font size

set guioptions-=m               " remove menu in gvim

set guioptions-=T               " remove toolbar in gvim

set guioptions-=r               " remove scrollbar in gvim

" Backup Files

"set directory=~/tmp

"set backupdir=~/tmp

"}}}
""" NetRW {{{

let g:netrw_liststyle=3     " Tree-Style Listing

"}}}
""" Status Line {{{

set laststatus=2                                " always show status line

let g:currentmode = {
    \ 'n' : 'NORMAL',
    \ 'v' : 'VISUAL',
    \ 'V' : 'V-LINE',
    \ "\<C-v>" : 'V-BLOCK',
    \ 'i' : 'INSERT',
    \ 'R' : 'REPLACE',
    \ 's' : 'SELECT',
    \ 'S' : 'S-LINE',
    \ "\<C-s>" : 'S-BLOCK',
    \ 'c' : 'COMMAND'
\ }

function! Getcurrentmode()
    return get(g:currentmode, mode())
endfunction


function! Getfiletype()
    let l:ftype = &filetype
    if strlen(ftype) ==? 0
        return '[UNDEFINED]'
    else
        return '[' . toupper(l:ftype) . ']'
    endif
endfunction


function! Getmodified()
    if &modified
        return '[+]'
    else
        return ''
    endif
endfunction


function! StatusLine()
    if win_getid(winnr()) ==? g:statusline_winid
        if mode() ==? 'n'
            " set statusline highlight group
            hi! StatusLine cterm=NONE ctermfg=109 ctermbg=231 gui=NONE guifg=#87afaf guibg=#ffffff 
            " statusline of active window in normal or command mode
            return '%#User1# %{Getfiletype()} %#User2# %{Getcurrentmode()} %* %f %#User8#%{Getmodified()}'
        elseif mode() ==? 'i' || mode() ==? 'r' 
            " set statusline highlight group
            hi! StatusLine cterm=NONE ctermfg=178 ctermbg=231 gui=NONE guifg=#d7af00 guibg=#ffffff 
            " statusline of active window in insert or replace modes
            return '%#User1# %{Getfiletype()} %#User3# %{Getcurrentmode()} %* %f %#User8#%{Getmodified()}'
        elseif mode() ==? 'v' || mode() ==? 's'
            " set statusline highlight group
            hi! StatusLine cterm=NONE ctermfg=247 ctermbg=231 gui=NONE guifg=#9e9e9e guibg=#ffffff 
            " statusline of active window in visual or select modes
            return '%#User1# %{Getfiletype()} %#User4# %{Getcurrentmode()} %* %f %#User8#%{Getmodified()}'
        endif
    else                                                                               
        " statusline of inactive windows
        return '%#User1# %{Getfiletype()} %#User7# %{Getcurrentmode()} %* %f %#User9#%{Getmodified()}'
    endif
endfunction

set statusline=%!StatusLine()

"}}}
""" Mappings{{{

let mapleader = " "

nnoremap <leader>e :vsp .<CR><C-W>H

nnoremap <leader>v :vsp<CR>

nnoremap <leader>h :nohl<CR>

nnoremap <leader>n :set relativenumber!<CR>

nnoremap <space> <nop>

"}}}
