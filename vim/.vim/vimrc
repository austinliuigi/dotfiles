"Name: vimrc
"Author: Austin Liu
"Date Created: July 2020
"Date Modified: August 5, 2020

"""Essentials"{{{

syntax on						" enable syntax highlighting

filetype plugin indent on		" enable filetype detection, execute filetype-specific ex commands local to the local buffer, and load the indent file for the detected filetype

set encoding=utf-8				" character encoding format

set backspace=start,eol,indent	" better backspace in insert mode

set showcmd
"}}}

"""Niceties"{{{

let g:scheme_termtrans=1

colorscheme custom              " use personal colorscheme

set hidden						" allow a buffer to load in a window that currently has a modified buffer

set relativenumber				" make line numbers relative to current line

set number						" show line numbers (only shows current line # with relativenumber set)

set splitright                  " default vert split window to appear on the right

set foldmethod=marker           " use triple braces to indicate beginning and end of a fold

set showmatch					" show matching symmetric delimiter

set wildmenu					" command-line autocomplete bar

set scrolloff=5

set lazyredraw					" be conservative with screen refreshes

set cursorline                  " highlight line that cursor is on

set linebreak                   " avoid wrapping mid-word

set noshowmode                  " don't show modemsg on cmdline

set tildeop                     " tilde acts like an operator

set guifont=Cascadia_Mono:h11

"set directory=~/tmp

"set backupdir=~/tmp
"}}}

""" Status Line {{{

set laststatus=2                                " always show status line

let g:currentmode = {
    \ 'n' : 'NORMAL',
    \ 'v' : 'VISUAL',
    \ 'V' : 'V-LINE',
    \ "\<C-v>" : 'V-BLOCK',
    \ 'i' : 'INSERT',
    \ 'R' : 'REPLACE',
    \ 's' : 'SELECT',
    \ 'S' : 'S-LINE',
    \ "\<C-s>" : 'S-BLOCK'
\ }

function! Getcurrentmode()
    return get(g:currentmode, mode())
endfunction

function! Getfiletype()
    let l:ftype = &filetype
    if strlen(ftype) ==? 0
        return '[UND]'
    else
        return '[' . toupper(l:ftype) . ']'
    endif
endfunction

function! Getmodified()
    if &modified
        return '[+]'
    else
        return ''
    endif
endfunction

function! StatusLine()
    if win_getid(winnr()) ==? g:statusline_winid
        " statusline of active window
        return '%#User3# %{Getfiletype()} %#User4# %{Getcurrentmode()} %* %f %#User6#%{Getmodified()}%* %=%#User1# '
    else                                                                               
        " statusline of inactive windows
        return '%#User3# %{Getfiletype()} %#User5# %{Getcurrentmode()} %* %f %#User7#%{Getmodified()}%* %=%#User2# '
    endif
endfunction

set statusline=%!StatusLine()

"set statusline=%#User1#
"
"set statusline+=\ 
"
"set statusline+=%#User3#
"
"set statusline+=\ %{Getfiletype()}\             " file name
"
"set statusline+=%4*
"
"set statusline+=\ %{Getcurrentmode()}\          " current vim mode
"
"set statusline+=%*
"
"set statusline+=\ %f\                           " file type 
"
"set statusline+=%=
"
"set statusline+=%#User6#
"
"set statusline+=%m                              " indicate if buffer has unsaved changes

"}}}

""" Whitespace"{{{

set tabstop=4					" length of <tab> when it is displayed

set softtabstop=4				" length of <tab> (& respective <bksp>) when you type it

set shiftwidth=4				" indent length

set expandtab					" tab will act as spaces (makes its length consistent across all platforms)

set autoindent					" indent to the previous line's indent level

set smartindent					" indent based on c syntax
"}}}

""" Searching"{{{

set incsearch					" search as you type

set hlsearch					" search highlighting

set ignorecase                  " default to case insensitive
"}}}

""" NetRW {{{

let g:netrw_liststyle=3

"}}}

""" Mappings{{{

let mapleader = " "

nnoremap <leader>e :vsp .<CR><C-W>H

nnoremap <leader>v :vsp<CR>

nnoremap <leader>h :nohl<CR>

nnoremap <leader>n :set relativenumber!<CR>

nnoremap <space> <nop>
"}}}
